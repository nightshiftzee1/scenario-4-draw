//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input Scripts/Input System/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""TouchScreen"",
            ""id"": ""454929e6-0658-4d56-83a5-e6f38a021769"",
            ""actions"": [
                {
                    ""name"": ""TouchPress1"",
                    ""type"": ""Button"",
                    ""id"": ""415cf387-d1f7-4d9d-98cb-89a403f08aa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""de8d673d-7912-408c-85bb-f51f8cfaa353"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPress2"",
                    ""type"": ""Button"",
                    ""id"": ""70eb1f79-e925-4d53-a431-3a3b7aacb0bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f451fde0-4ba3-407d-b312-de4e88c80d33"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ef6694d6-9b67-4e9d-9dc8-0ca2140232a9"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79f39ba9-0579-4ad4-b3db-cc007fcdf26f"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b21d887-cba3-4ea6-9e8c-f507e38186ac"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6645bd41-505c-4cf9-84cb-cc79a3f3ad13"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchScreen
        m_TouchScreen = asset.FindActionMap("TouchScreen", throwIfNotFound: true);
        m_TouchScreen_TouchPress1 = m_TouchScreen.FindAction("TouchPress1", throwIfNotFound: true);
        m_TouchScreen_TouchPosition1 = m_TouchScreen.FindAction("TouchPosition1", throwIfNotFound: true);
        m_TouchScreen_TouchPress2 = m_TouchScreen.FindAction("TouchPress2", throwIfNotFound: true);
        m_TouchScreen_TouchPosition2 = m_TouchScreen.FindAction("TouchPosition2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchScreen
    private readonly InputActionMap m_TouchScreen;
    private List<ITouchScreenActions> m_TouchScreenActionsCallbackInterfaces = new List<ITouchScreenActions>();
    private readonly InputAction m_TouchScreen_TouchPress1;
    private readonly InputAction m_TouchScreen_TouchPosition1;
    private readonly InputAction m_TouchScreen_TouchPress2;
    private readonly InputAction m_TouchScreen_TouchPosition2;
    public struct TouchScreenActions
    {
        private @TouchControls m_Wrapper;
        public TouchScreenActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPress1 => m_Wrapper.m_TouchScreen_TouchPress1;
        public InputAction @TouchPosition1 => m_Wrapper.m_TouchScreen_TouchPosition1;
        public InputAction @TouchPress2 => m_Wrapper.m_TouchScreen_TouchPress2;
        public InputAction @TouchPosition2 => m_Wrapper.m_TouchScreen_TouchPosition2;
        public InputActionMap Get() { return m_Wrapper.m_TouchScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchScreenActions set) { return set.Get(); }
        public void AddCallbacks(ITouchScreenActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Add(instance);
            @TouchPress1.started += instance.OnTouchPress1;
            @TouchPress1.performed += instance.OnTouchPress1;
            @TouchPress1.canceled += instance.OnTouchPress1;
            @TouchPosition1.started += instance.OnTouchPosition1;
            @TouchPosition1.performed += instance.OnTouchPosition1;
            @TouchPosition1.canceled += instance.OnTouchPosition1;
            @TouchPress2.started += instance.OnTouchPress2;
            @TouchPress2.performed += instance.OnTouchPress2;
            @TouchPress2.canceled += instance.OnTouchPress2;
            @TouchPosition2.started += instance.OnTouchPosition2;
            @TouchPosition2.performed += instance.OnTouchPosition2;
            @TouchPosition2.canceled += instance.OnTouchPosition2;
        }

        private void UnregisterCallbacks(ITouchScreenActions instance)
        {
            @TouchPress1.started -= instance.OnTouchPress1;
            @TouchPress1.performed -= instance.OnTouchPress1;
            @TouchPress1.canceled -= instance.OnTouchPress1;
            @TouchPosition1.started -= instance.OnTouchPosition1;
            @TouchPosition1.performed -= instance.OnTouchPosition1;
            @TouchPosition1.canceled -= instance.OnTouchPosition1;
            @TouchPress2.started -= instance.OnTouchPress2;
            @TouchPress2.performed -= instance.OnTouchPress2;
            @TouchPress2.canceled -= instance.OnTouchPress2;
            @TouchPosition2.started -= instance.OnTouchPosition2;
            @TouchPosition2.performed -= instance.OnTouchPosition2;
            @TouchPosition2.canceled -= instance.OnTouchPosition2;
        }

        public void RemoveCallbacks(ITouchScreenActions instance)
        {
            if (m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchScreenActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchScreenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchScreenActions @TouchScreen => new TouchScreenActions(this);
    public interface ITouchScreenActions
    {
        void OnTouchPress1(InputAction.CallbackContext context);
        void OnTouchPosition1(InputAction.CallbackContext context);
        void OnTouchPress2(InputAction.CallbackContext context);
        void OnTouchPosition2(InputAction.CallbackContext context);
    }
}
